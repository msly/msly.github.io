<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home</title>
    <link>https://msly.github.io/</link>
    <description>Recent content on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>msly.2008@gmail.com (msly)</managingEditor>
    <webMaster>msly.2008@gmail.com (msly)</webMaster>
    <copyright>(c) 2016 copyright. Hugo [hyde-y]　code with &lt;i class=&#39;fa fa-heart&#39;&gt;&lt;/i&gt;</copyright>
    <lastBuildDate>Fri, 20 Oct 2023 22:52:24 +0800</lastBuildDate>
    <atom:link href="https://msly.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>威海旅游记录</title>
      <link>https://msly.github.io/2023/10/20/%E5%A8%81%E6%B5%B7%E6%97%85%E6%B8%B8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 20 Oct 2023 22:52:24 +0800</pubDate>
      <author>msly.2008@gmail.com (msly)</author>
      <guid>https://msly.github.io/2023/10/20/%E5%A8%81%E6%B5%B7%E6%97%85%E6%B8%B8%E8%AE%B0%E5%BD%95/</guid>
      <description>

&lt;h3 id=&#34;前期准备&#34;&gt;前期准备&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;防晒衣/防晒霜&lt;br /&gt;
防晒系列是保护皮肤，海边看着太阳不大，晒一天也能晒脱皮&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;泳衣/泳镜 泳帽用不上&lt;br /&gt;
下海游泳的话，注意带上水，海水比较咸，需要及时补充水分&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;租车&#34;&gt;租车&lt;/h3&gt;

&lt;p&gt;坐车到威海站，可以到韩乐坊租电动车，大约40元/天，可以铁塔换电无限续航。&lt;br /&gt;
&lt;img src=&#34;https://msly.github.io/images/weihai-travel/tieta.png&#34; alt=&#34;铁塔换电&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;路线&#34;&gt;路线&lt;/h3&gt;

&lt;p&gt;往南可以去那香海，成头山等沿线&lt;br /&gt;
往北可以去威海公园，猫头山，小石岛沿线&lt;br /&gt;
那香海 日出日落都能看到&lt;br /&gt;
小石岛 最佳日落观赏点
成头山/半月湾 最佳日出观赏点&lt;/p&gt;

&lt;p&gt;其他的可以参考抖音上的威海旅行&lt;/p&gt;

&lt;p&gt;骑行电动车在海边穿梭，感受海风扑面而来的气息&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PlantsVsZombies存档修改</title>
      <link>https://msly.github.io/2023/08/09/plantsvszombies%E5%AD%98%E6%A1%A3%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Wed, 09 Aug 2023 23:38:58 +0800</pubDate>
      <author>msly.2008@gmail.com (msly)</author>
      <guid>https://msly.github.io/2023/08/09/plantsvszombies%E5%AD%98%E6%A1%A3%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;存档目录在 C:\ProgramData\PopCap Games\PlantsVsZombies\userdata&lt;/p&gt;

&lt;p&gt;文件user1.dat&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前面4字节固定 0C 00 00 00&lt;/li&gt;
&lt;li&gt;第五个字节代表关卡，1-1 到 5-10，5个大关，每个大关10个小关
对应数字从0x01（1-1） 到 0x3C（5-10）&lt;/li&gt;
&lt;li&gt;第8，9字节对应 游戏金币数/10， 也就是这里的150代表游戏的1500，如果要改金钱到10w(0x2710), 对应字节为 10 27&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/plantsvszombie/p1.jpg&#34; alt=&#34;p1.jpg&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常用web工具</title>
      <link>https://msly.github.io/tools/</link>
      <pubDate>Thu, 07 Apr 2016 16:34:39 +0800</pubDate>
      <author>msly.2008@gmail.com (msly)</author>
      <guid>https://msly.github.io/tools/</guid>
      <description>&lt;p&gt;网上搜集的几个常用的在线工具&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/md5&#34;&gt;md5计算&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/base64&#34;&gt;base64计算&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/json&#34;&gt;目前发现最好用的json格式化工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/calc&#34;&gt;calc计算器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/unix&#34;&gt;unix时间戳转换&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/unicode&#34;&gt;unicode字符转换&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msly.github.io/regex&#34;&gt;regex正则验证&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[译]自己动手编写一个简单的解释器 Part 7</title>
      <link>https://msly.github.io/2016/04/07/%E8%AF%91%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%A3%E9%87%8A%E5%99%A8-part-7/</link>
      <pubDate>Thu, 07 Apr 2016 11:44:37 +0800</pubDate>
      <author>msly.2008@gmail.com (msly)</author>
      <guid>https://msly.github.io/2016/04/07/%E8%AF%91%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%A7%A3%E9%87%8A%E5%99%A8-part-7/</guid>
      <description>&lt;p&gt;原文：&lt;a href=&#34;https://ruslanspivak.com/lsbasi-part7/&#34;&gt;Let’s Build A Simple Interpreter. Part 7.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C++代码：&lt;a href=&#34;https://github.com/msly/compiler/tree/master/second&#34;&gt;https://github.com/msly/compiler/tree/master/second&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;应上次之约，今天我将讲一个在以后的章节会经常使用的，重要的数据结构。所以大家系好安全带（做好准备），让我们开始吧。&lt;/p&gt;

&lt;p&gt;到目前为止，我们把解释器和解析器的代码混在一起，一旦解析器构建好某种语法结构，比如加法、减法、乘法或除法,解释器就计算该表达式的结果(译者:通过parser来触发interpreter执行).这种解释器被称为语法导向的解释器.他们通常是单一的输入，适用于基本的语言的应用程序。为了分析更复杂的Pascal程序语言结构，我们需要建立一个中间表示(IR)。我们的解析器负责构建IR，解释器将用来解释这个IR输入。&lt;/p&gt;

&lt;p&gt;事实证明，树是一个非常合适的数据结构用来表示IR。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_realtree.png&#34; alt=&#34;lsbasi_part7_realtree.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;让我们来快速了解下树的一些特性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;树是由一个或多个节点组成的层次关系的集合。&lt;/li&gt;
&lt;li&gt;树有一个根节点，就是最顶层的那个。&lt;/li&gt;
&lt;li&gt;每一个非根节点有且只有一个父节点。&lt;/li&gt;
&lt;li&gt;下图中标记 * 的节点是父节点，标记2和7的是他的子节点，按左到右的顺序排列。&lt;/li&gt;
&lt;li&gt;没有子节点的节点被称为叶节点。&lt;/li&gt;
&lt;li&gt;除了根节点和叶节点，其他节点被称为内部节点。&lt;/li&gt;
&lt;li&gt;子节点也是一颗完整的子树，在下图中左节点（标记 * 的节点）相对 + 节点就是一颗完整的子树。&lt;/li&gt;
&lt;li&gt;在计算机科学中，树结构像一颗倒挂着的树，根朝上，树枝是往下生长的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是表达式2 * 7 + 3用树的表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_tree_terminology.png&#34; alt=&#34;lsbasi_part7_tree_terminology.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们把这个系列文章中使用的IR（中间表示）叫做抽象语法树（AST）。在我们深入研究AST之前，先简单的谈谈分析树（parse trees）。虽然我们不在解释器和编译器中使用分析树，他可以帮助你了解你的解析器通过可视化的执行轨迹来解析输入。我们也将与AST进行比较，从而明白为什么AST比分析树更适合中间表示。&lt;/p&gt;

&lt;p&gt;那么，什么是分析树？分析树（有时也称具体语法树）根据我们的语法定义来构建语言的语法结构。他基本说明了解析器是如何识别语言的，换句话说，他表示了你的语法起始符怎样从编程语言中提取一个特定的字符串。&lt;/p&gt;

&lt;p&gt;解析器的调用堆栈隐式的表示了一颗分析树，他在当你的解析器试图去识别一个特定的语言结构时，自动的构建在内存中。&lt;/p&gt;

&lt;p&gt;让我们看一下表达式 2 * 7 + 3 的分析树。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_parsetree_01.png&#34; alt=&#34;lsbasi_part7_parsetree_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在上图中能看到:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;分析树记录了一系列解析器用于识别输入的规则。&lt;/li&gt;
&lt;li&gt;分析树的根标记为语法起始符。&lt;/li&gt;
&lt;li&gt;每个内部节点代表一个非终结符，他在这个例子中，代表了类似exp、term或factor等语法规则应用。&lt;/li&gt;
&lt;li&gt;每个叶节点代表一个token。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;我已经提过，我们不打算手动构建分析树，并用于我们的解释器，但是分析树可以帮助你理解解析器是如何通过可视化解析调用序列来解释输入的。&lt;/p&gt;

&lt;p&gt;我很快写了一个小工具&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/genptdot.py&#34;&gt;genptdot.py&lt;/a&gt;，你可以用它来看各种不同的数学表达式的分析树。使用这个工具前，需要安装&lt;a href=&#34;http://graphviz.org/&#34;&gt;Graphviz&lt;/a&gt;，然后运行下面的命令，打开生成的图片文件parsetree.png，你就能看到你在命令行输入的表达式的分析树。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ python genptdot.py &amp;quot;14 + 2 * 3 - 6 / 2&amp;quot; &amp;gt; \
  parsetree.dot &amp;amp;&amp;amp; dot -Tpng -o parsetree.png parsetree.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是工具生成的表达式 14 + 2 * 3 -6 / 2 的分析树图片。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_genptdot_01.png&#34; alt=&#34;lsbasi_part7_genptdot_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你可以试试不同的表达式，看看表达式对应的分析树是什么样子的。&lt;/p&gt;

&lt;p&gt;现在，我们来谈谈抽象语法树（AST）。他就是我们接下来的系列都使用的中间表示（IR）。他是我们的解释器和将来的编译器的重要数据结构之一。&lt;/p&gt;

&lt;p&gt;通过观察表达式 2 * 7 + 3 的AST和分析树，开始我们的讨论吧：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_01.png&#34; alt=&#34;lsbasi_part7_ast_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你能从上面的图片看到，AST抓住了表达式的本质却更精简。&lt;/p&gt;

&lt;p&gt;下面是AST和分析树的主要不同点：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;AST使用操作符作为根节点和内部节点，操作数作为他们的子节点。&lt;/li&gt;
&lt;li&gt;AST不像分析树那样使用内部节点来表示语法规则。&lt;/li&gt;
&lt;li&gt;AST的并不表示实际语法的每一个细节（这就是为什么把他叫抽象树），例如：没有规则节点和没有括号。&lt;/li&gt;
&lt;li&gt;相比同样的语言结构AST比分析树更紧凑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么，什么是抽象语法树？抽象语法树（AST）是表示语言结构的抽象语法结构的树，他的每个内部节点和根节点表示操作符，子节点表示那些操作符的操作数。&lt;/p&gt;

&lt;p&gt;我已经提过，AST比分析树更紧凑。我们来看一下表达式 7 + ((2 + 3))的AST和分析树。你可以看到AST比分析树小很多，但始终抓到了输入的本质。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_02.png&#34; alt=&#34;lsbasi_part7_ast_02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;到目前为止，一切看似都很好，但怎么在AST中编码操作符的优先级？为了在AST中编码操作符优先级，换句话说，就是表示“X 发生在 Y 前面”，你只需要在树中把 X 放在 Y 下面的层级。在前面的图片中，你已经看到了吧。&lt;/p&gt;

&lt;p&gt;我们来看看更多的一些例子。&lt;/p&gt;

&lt;p&gt;在下面的图片中，左边那个表示 2 * 7 + 3，右边修改了优先级，把 7 + 3 放到括号里，表示 2 * (7 + 3)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_astprecedence_01.png&#34; alt=&#34;lsbasi_part7_astprecedence_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是表达式 1 + 2 + 3 + 4 + 5 的AST：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_astprecedence_02.png&#34; alt=&#34;lsbasi_part7_astprecedence_02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从上面的图片可以看到，优先级越高的操作符最终在树中的位置更低。&lt;/p&gt;

&lt;p&gt;好吧，让我们写一些代码来实现不同的AST节点类型，并修改我们的解析器来生成这些节点组成的AST树。&lt;/p&gt;

&lt;p&gt;首先，我们将创建一个名为AST的基类，其他类将继承他：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class AST(object):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上没有太多代码。回想一下，AST表示的是操作符-操作数模式。目前我们有4个操作符和整数型操作数。操作符包括加、减、乘和除。我们可以创建单独的类来分别表示每个操作符，例如AddNode、SubNode、MulNode和DivNode，但是我们这里只使用一个BinOp类来表示所有的4个二元操作符（二元操作符就是一个操作符有两个操作数）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BinOp(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.token = self.op = op
        self.right = right
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构造函数的参数有left，op，right，left和right对应于左操作数节点和右操作数节点。op是表示操作符自己的token，例如：Token(PLUS，&amp;rsquo;+&amp;lsquo;)表示加法操作符，Token(MINUS，&amp;rsquo;-&amp;lsquo;)表示减法操作符，以此类推。&lt;/p&gt;

&lt;p&gt;为了在AST中表示整数，我们将定义一个Num类，他有一个INTEGER token以及token的值。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你注意到了没有，所有的节点存储了token用来创建节点。这主要是为了方便，他在将来会派上用场。&lt;/p&gt;

&lt;p&gt;回想下表达式 2 * 7 + 3 的AST。我们将要手动用代码来表示他：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from spi import Token, MUL, PLUS, INTEGER, Num, BinOp
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; mul_token = Token(MUL, &#39;*&#39;)
&amp;gt;&amp;gt;&amp;gt; plus_token = Token(PLUS, &#39;+&#39;)
&amp;gt;&amp;gt;&amp;gt; mul_node = BinOp(
...     left=Num(Token(INTEGER, 2)),
...     op=mul_token,
...     right=Num(Token(INTEGER, 7))
... )
&amp;gt;&amp;gt;&amp;gt; add_node = BinOp(
...     left=mul_node,
...     op=plus_token,
...     right=Num(Token(INTEGER, 3))
... )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是我们的新节点类定义的AST，图片遵循上面的手动创建过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_astimpl_01.png&#34; alt=&#34;lsbasi_part7_astimpl_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是我们修改的解析器代码，识别输入（算术表达式）并返回一个AST作为结果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class AST(object):
    pass


class BinOp(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.token = self.op = op
        self.right = right


class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value


class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        # set current token to the first token taken from the input
        self.current_token = self.lexer.get_next_token()

    def error(self):
        raise Exception(&#39;Invalid syntax&#39;)

    def eat(self, token_type):
        # compare the current token type with the passed token
        # type and if they match then &amp;quot;eat&amp;quot; the current token
        # and assign the next token to the self.current_token,
        # otherwise raise an exception.
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            self.error()

    def factor(self):
        &amp;quot;&amp;quot;&amp;quot;factor : INTEGER | LPAREN expr RPAREN&amp;quot;&amp;quot;&amp;quot;
        token = self.current_token
        if token.type == INTEGER:
            self.eat(INTEGER)
            return Num(token)
        elif token.type == LPAREN:
            self.eat(LPAREN)
            node = self.expr()
            self.eat(RPAREN)
            return node

    def term(self):
        &amp;quot;&amp;quot;&amp;quot;term : factor ((MUL | DIV) factor)*&amp;quot;&amp;quot;&amp;quot;
        node = self.factor()

        while self.current_token.type in (MUL, DIV):
            token = self.current_token
            if token.type == MUL:
                self.eat(MUL)
            elif token.type == DIV:
                self.eat(DIV)

            node = BinOp(left=node, op=token, right=self.factor())

        return node

    def expr(self):
        &amp;quot;&amp;quot;&amp;quot;
        expr   : term ((PLUS | MINUS) term)*
        term   : factor ((MUL | DIV) factor)*
        factor : INTEGER | LPAREN expr RPAREN
        &amp;quot;&amp;quot;&amp;quot;
        node = self.term()

        while self.current_token.type in (PLUS, MINUS):
            token = self.current_token
            if token.type == PLUS:
                self.eat(PLUS)
            elif token.type == MINUS:
                self.eat(MINUS)

            node = BinOp(left=node, op=token, right=self.term())

        return node

    def parse(self):
        return self.expr()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们通过一些算术表达式来复习下AST的构建过程。&lt;/p&gt;

&lt;p&gt;从上面的代码你可以看到，AST构建节点的方式，每个BinOp节点采用节点变量的当前值作为他的左节点，调用term或factor的结果作为右节点。所以他有效的把节点下推到左边，下面的表达式1 + 2 + 3 + 4 + 5就是一个很好的例子。这里是一个可视化表示解析器如何逐步建立了表达式1 + 2 + 3 + 4 + 5的AST：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_astimpl_02.png&#34; alt=&#34;lsbasi_part7_astimpl_02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;为了帮助你看到各种的算术表达式的AST，我写了一个小工具&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/genastdot.py&#34;&gt;genastdot.py&lt;/a&gt;，把算数表达式作为第一个参数，最后会通过dot工具生成一个画着AST的dot文件（dot是&lt;a href=&#34;http://graphviz.org/&#34;&gt;Graphviz&lt;/a&gt;的一部分，需要安装Graphviz才能运行）。下面是生成AST的一个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ python genastdot.py &amp;quot;7 + 3 * (10 / (12 / (3 + 1) - 1))&amp;quot; &amp;gt; \
  ast.dot &amp;amp;&amp;amp; dot -Tpng -o ast.png ast.dot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_genastdot_01.png&#34; alt=&#34;lsbasi_part7_genastdot_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是值得你花时间来写一些算术表达式，手动画出他们的AST，然后用工具&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/genastdot.py&#34;&gt;genastdot.py&lt;/a&gt;生成的进行验证，这将帮助你更好的理解解析器是如何构建AST的。&lt;/p&gt;

&lt;p&gt;好了，下面是表达式 2 * 7 + 3 的AST:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_walking_01.png&#34; alt=&#34;lsbasi_part7_ast_walking_01.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如何来遍历树从而正确计算树所代表的表达式呢？你可以使用postorder traversal（后序遍历）-深度优先遍历的一个特例，从根节点开始，按从左到右的方式递归的访问子节点。后序遍历访问节点尽可能快的速度远离根节点。&lt;/p&gt;

&lt;p&gt;下面是后序遍历的伪代码，&amp;lt;&amp;lt; postorder actions &amp;gt;&amp;gt;代表一个BinOp节点的运算符操作（进行+-*/运算）或一个Num节点的求值操作(返回Num节点的值)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_visit_postorder.png&#34; alt=&#34;lsbasi_part7_ast_visit_postorder.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们的解释器使用后序遍历的原因，第一，我们需要先计算更低层的节点，因为他们有更高的优先级；第二，我们需要先计算操作数，才能使用操作符计算结果。在下面的图片，你可以看到，后序遍历我们首先计算表达式 2 * 7，然后才计算 14 + 3，得到正确的结果，17：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_walking_02.png&#34; alt=&#34;lsbasi_part7_ast_walking_02.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;为了完整起见，我提一下树的三种深度优先遍历：preorder traversal（前序遍历）, inorder traversal（中序遍历）, 和 postorder traversal（后序遍历）。名字的来源于你在遍历代码放actions（具体运算）的位置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_ast_visit_generic.png&#34; alt=&#34;lsbasi_part7_ast_visit_generic.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有时你可能需要在上图所示的三个位置都需要执行某些操作。你会看到这样的一些例子在本文的&lt;a href=&#34;https://github.com/rspivak/lsbasi/tree/master/part7&#34;&gt;源码库&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;好吧，让我们写一些代码来访问和解释由我们的解析器构建的抽象语法树，我们可以吗？&lt;/p&gt;

&lt;p&gt;下面是源代码，使用了&lt;a href=&#34;https://zh.wikipedia.org/zh/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F&#34;&gt;访问者模式&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class NodeVisitor(object):
    def visit(self, node):
        method_name = &#39;visit_&#39; + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        raise Exception(&#39;No visit_{} method&#39;.format(type(node).__name__))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是Interpreter类的代码，继承了NodeVisitor类并根据visit_NodeType实现了不同方法，NodeType会被具体的节点类名字代替，如：BinOp，Num等等（见下面的visit_BinOp， visit_Num）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Interpreter(NodeVisitor):
    def __init__(self, parser):
        self.parser = parser

    def visit_BinOp(self, node):
        if node.op.type == PLUS:
            return self.visit(node.left) + self.visit(node.right)
        elif node.op.type == MINUS:
            return self.visit(node.left) - self.visit(node.right)
        elif node.op.type == MUL:
            return self.visit(node.left) * self.visit(node.right)
        elif node.op.type == DIV:
            return self.visit(node.left) / self.visit(node.right)

    def visit_Num(self, node):
        return node.value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于代码有两个有趣的事情值得在这里提一下：首先，操作AST节点的访问者代码从AST节点解耦。你可以看到AST的节点类（BinOp，Num）没有任何操作节点数据的代码。这些逻辑都封装在实现了NodeVisitor类的Interpreter类中。&lt;/p&gt;

&lt;p&gt;其次，在NodeVisitor的visit方法中没有像下面这样使用了大量的if语句：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def visit(node):
    node_type = type(node).__name__
    if node_type == &#39;BinOp&#39;:
        return self.visit_BinOp(node)
    elif node_type == &#39;Num&#39;:
        return self.visit_Num(node)
    elif ...
    # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者像这样:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def visit(node):
    if isinstance(node, BinOp):
        return self.visit_BinOp(node)
    elif isinstance(node, Num):
        return self.visit_Num(node)
    elif ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NodeVisitor类的visit方法是非常通用的，他根据节点的类型把调用转发到合适的方法。我们前面提过，为了使用他，我们的解释器继承了NodeVisitor类并实现了必要的方法。如果传递给visit方法的类型是BinOp，他就会调用visit_BinOp方法；如果传递的类型是Num，他就会调用visit_Num方法，以此类推。&lt;/p&gt;

&lt;p&gt;花一些时间学习这一方法（python标准库模块ast使用了相同的机制来访问节点），我们可以在将来用更多新的visit_NodeType方法来扩展我们的解释器。&lt;/p&gt;

&lt;p&gt;generic_visit方法是抛出一个异常，表明它遇到一个节点，在实现类有没有相应的visit&lt;em&gt;NodeType方法（No visit&lt;/em&gt;{} method）。&lt;/p&gt;

&lt;p&gt;现在，我们来手动构建 2 * 7 + 3 的AST，并把他放到解释器里面运行，看看visit方法怎么去计算表达式。下面是在Python Shell的操作：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from spi import Token, MUL, PLUS, INTEGER, Num, BinOp
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; mul_token = Token(MUL, &#39;*&#39;)
&amp;gt;&amp;gt;&amp;gt; plus_token = Token(PLUS, &#39;+&#39;)
&amp;gt;&amp;gt;&amp;gt; mul_node = BinOp(
...     left=Num(Token(INTEGER, 2)),
...     op=mul_token,
...     right=Num(Token(INTEGER, 7))
... )
&amp;gt;&amp;gt;&amp;gt; add_node = BinOp(
...     left=mul_node,
...     op=plus_token,
...     right=Num(Token(INTEGER, 3))
... )
&amp;gt;&amp;gt;&amp;gt; from spi import Interpreter
&amp;gt;&amp;gt;&amp;gt; inter = Interpreter(None)
&amp;gt;&amp;gt;&amp;gt; inter.visit(add_node)
17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如你所见，我把表达式的根节点传递给visit方法，他会触发树的遍历，分发调用到Interpreter类中相应的方法，并生成结果。&lt;/p&gt;

&lt;p&gt;好了，为了方便，下面给出解释器的完整代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot; SPI - Simple Pascal Interpreter &amp;quot;&amp;quot;&amp;quot;

###############################################################################
#                                                                             #
#  LEXER                                                                      #
#                                                                             #
###############################################################################

# Token types
#
# EOF (end-of-file) token is used to indicate that
# there is no more input left for lexical analysis
INTEGER, PLUS, MINUS, MUL, DIV, LPAREN, RPAREN, EOF = (
    &#39;INTEGER&#39;, &#39;PLUS&#39;, &#39;MINUS&#39;, &#39;MUL&#39;, &#39;DIV&#39;, &#39;(&#39;, &#39;)&#39;, &#39;EOF&#39;
)


class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        &amp;quot;&amp;quot;&amp;quot;String representation of the class instance.

        Examples:
            Token(INTEGER, 3)
            Token(PLUS, &#39;+&#39;)
            Token(MUL, &#39;*&#39;)
        &amp;quot;&amp;quot;&amp;quot;
        return &#39;Token({type}, {value})&#39;.format(
            type=self.type,
            value=repr(self.value)
        )

    def __repr__(self):
        return self.__str__()


class Lexer(object):
    def __init__(self, text):
        # client string input, e.g. &amp;quot;4 + 2 * 3 - 6 / 2&amp;quot;
        self.text = text
        # self.pos is an index into self.text
        self.pos = 0
        self.current_char = self.text[self.pos]

    def error(self):
        raise Exception(&#39;Invalid character&#39;)

    def advance(self):
        &amp;quot;&amp;quot;&amp;quot;Advance the `pos` pointer and set the `current_char` variable.&amp;quot;&amp;quot;&amp;quot;
        self.pos += 1
        if self.pos &amp;gt; len(self.text) - 1:
            self.current_char = None  # Indicates end of input
        else:
            self.current_char = self.text[self.pos]

    def skip_whitespace(self):
        while self.current_char is not None and self.current_char.isspace():
            self.advance()

    def integer(self):
        &amp;quot;&amp;quot;&amp;quot;Return a (multidigit) integer consumed from the input.&amp;quot;&amp;quot;&amp;quot;
        result = &#39;&#39;
        while self.current_char is not None and self.current_char.isdigit():
            result += self.current_char
            self.advance()
        return int(result)

    def get_next_token(self):
        &amp;quot;&amp;quot;&amp;quot;Lexical analyzer (also known as scanner or tokenizer)

        This method is responsible for breaking a sentence
        apart into tokens. One token at a time.
        &amp;quot;&amp;quot;&amp;quot;
        while self.current_char is not None:

            if self.current_char.isspace():
                self.skip_whitespace()
                continue

            if self.current_char.isdigit():
                return Token(INTEGER, self.integer())

            if self.current_char == &#39;+&#39;:
                self.advance()
                return Token(PLUS, &#39;+&#39;)

            if self.current_char == &#39;-&#39;:
                self.advance()
                return Token(MINUS, &#39;-&#39;)

            if self.current_char == &#39;*&#39;:
                self.advance()
                return Token(MUL, &#39;*&#39;)

            if self.current_char == &#39;/&#39;:
                self.advance()
                return Token(DIV, &#39;/&#39;)

            if self.current_char == &#39;(&#39;:
                self.advance()
                return Token(LPAREN, &#39;(&#39;)

            if self.current_char == &#39;)&#39;:
                self.advance()
                return Token(RPAREN, &#39;)&#39;)

            self.error()

        return Token(EOF, None)


###############################################################################
#                                                                             #
#  PARSER                                                                     #
#                                                                             #
###############################################################################

class AST(object):
    pass


class BinOp(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.token = self.op = op
        self.right = right


class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value


class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        # set current token to the first token taken from the input
        self.current_token = self.lexer.get_next_token()

    def error(self):
        raise Exception(&#39;Invalid syntax&#39;)

    def eat(self, token_type):
        # compare the current token type with the passed token
        # type and if they match then &amp;quot;eat&amp;quot; the current token
        # and assign the next token to the self.current_token,
        # otherwise raise an exception.
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            self.error()

    def factor(self):
        &amp;quot;&amp;quot;&amp;quot;factor : INTEGER | LPAREN expr RPAREN&amp;quot;&amp;quot;&amp;quot;
        token = self.current_token
        if token.type == INTEGER:
            self.eat(INTEGER)
            return Num(token)
        elif token.type == LPAREN:
            self.eat(LPAREN)
            node = self.expr()
            self.eat(RPAREN)
            return node

    def term(self):
        &amp;quot;&amp;quot;&amp;quot;term : factor ((MUL | DIV) factor)*&amp;quot;&amp;quot;&amp;quot;
        node = self.factor()

        while self.current_token.type in (MUL, DIV):
            token = self.current_token
            if token.type == MUL:
                self.eat(MUL)
            elif token.type == DIV:
                self.eat(DIV)

            node = BinOp(left=node, op=token, right=self.factor())

        return node

    def expr(self):
        &amp;quot;&amp;quot;&amp;quot;
        expr   : term ((PLUS | MINUS) term)*
        term   : factor ((MUL | DIV) factor)*
        factor : INTEGER | LPAREN expr RPAREN
        &amp;quot;&amp;quot;&amp;quot;
        node = self.term()

        while self.current_token.type in (PLUS, MINUS):
            token = self.current_token
            if token.type == PLUS:
                self.eat(PLUS)
            elif token.type == MINUS:
                self.eat(MINUS)

            node = BinOp(left=node, op=token, right=self.term())

        return node

    def parse(self):
        return self.expr()


###############################################################################
#                                                                             #
#  INTERPRETER                                                                #
#                                                                             #
###############################################################################

class NodeVisitor(object):
    def visit(self, node):
        method_name = &#39;visit_&#39; + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        raise Exception(&#39;No visit_{} method&#39;.format(type(node).__name__))


class Interpreter(NodeVisitor):
    def __init__(self, parser):
        self.parser = parser

    def visit_BinOp(self, node):
        if node.op.type == PLUS:
            return self.visit(node.left) + self.visit(node.right)
        elif node.op.type == MINUS:
            return self.visit(node.left) - self.visit(node.right)
        elif node.op.type == MUL:
            return self.visit(node.left) * self.visit(node.right)
        elif node.op.type == DIV:
            return self.visit(node.left) / self.visit(node.right)

    def visit_Num(self, node):
        return node.value

    def interpret(self):
        tree = self.parser.parse()
        return self.visit(tree)


def main():
    while True:
        try:
            try:
                text = raw_input(&#39;spi&amp;gt; &#39;)
            except NameError:  # Python3
                text = input(&#39;spi&amp;gt; &#39;)
        except EOFError:
            break
        if not text:
            continue

        lexer = Lexer(text)
        parser = Parser(lexer)
        interpreter = Interpreter(parser)
        result = interpreter.interpret()
        print(result)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把上面的代码保存到spi.py或者你可以在&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/spi.py&#34;&gt;Github&lt;/a&gt;直接下载。来试试吧，看看这个基于树结构的新解释器正确的计算数学表达式。&lt;/p&gt;

&lt;p&gt;下面是一些例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;$ python spi.py
spi&amp;gt; 7 + 3 * (10 / (12 / (3 + 1) - 1))
22
spi&amp;gt; 7 + 3 * (10 / (12 / (3 + 1) - 1)) / (2 + 3) - 5 - 3 + (8)
10
spi&amp;gt; 7 + (((3 + 2)))
12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今天，你学了分析树，AST，如何构建AST，如何遍历表达式AST。你还修改了解析器和解释器的代码，并将他们拆分开了。当前的lexer（词法分析器），parer（解析器），interpreter（解释器）的接口像下面这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_pipeline.png&#34; alt=&#34;lsbasi_part7_pipeline.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看到，解析器从词法分析器获取token，生成AST作为解释器的输入，解释器遍历和解释AST。&lt;/p&gt;

&lt;p&gt;这些就是今天的内容，在结束前我简单的说下recursive-descent parsers（递归下降分析器），这里只给他一个定义，我在后面的系列会详细的来讨论。所以，这里就是他的定义：一个递归下降分析器是一个自顶向下的解析器，使用递归来处理输入。自顶向下表示先构建分析树的顶部节点，然后逐步的构建较低层的节点。&lt;/p&gt;

&lt;p&gt;下面是练习时间 :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://msly.github.io/images/lsbasi-part7/lsbasi_part7_exercise.png&#34; alt=&#34;lsbasi_part7_exercise.png&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;写一个转换器（提示：节点访问器），输入一个算术表达式，打印出后缀表示法，也被称为&lt;a href=&#34;https://zh.wikipedia.org/zh/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95&#34;&gt;逆波兰表示法&lt;/a&gt;（RPN）。例如：输入 (5 + 3) * 12 / 3，应该输出 5 3 + 12 * 3 /。看&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/ex1.py&#34;&gt;答案&lt;/a&gt;前先自己尝试解决他。&lt;/li&gt;
&lt;li&gt;写一个转换器（提示：节点访问器），输入一个算术表达式，输出LISP风格，2 + 3 变成 (+ 2 3)； (2 + 3 * 5) 会变成 (+ 2 (* 3 5))。同样的，看&lt;a href=&#34;https://github.com/rspivak/lsbasi/blob/master/part7/python/ex2.py&#34;&gt;答案&lt;/a&gt;前先自己尝试解决他。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;在下篇文章，我们将增加赋值和一元操作符正在成长的Pascal解释器。在那之前，好好生活，再见。&lt;/p&gt;

&lt;p&gt;P.S. 我给出了一个Rust实现的解释器在GitHub。这是我学习Rust的一种方法，所以你得注意代码可能不那么老到。欢迎提出如何写的更好的评论和建议。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://msly.github.io/about/</link>
      <pubDate>Wed, 06 Apr 2016 11:40:51 +0800</pubDate>
      <author>msly.2008@gmail.com (msly)</author>
      <guid>https://msly.github.io/about/</guid>
      <description>

&lt;h1 id=&#34;关于:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;关于&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;基于Hugo搭建的博客平台.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>